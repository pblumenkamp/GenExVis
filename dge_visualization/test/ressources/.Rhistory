{
setRepositories(graphics=FALSE, ind=NULL,
addURLs = c(CRAN = "http://www.population-genetics.de/2017-01-27/cran"))
install.packages("GAD", dep=TRUE )
install.packages("Hmisc", dep=TRUE )
install.packages("MCPMod", dep=TRUE )
install.packages("TeachingDemos", dep=TRUE )
install.packages("ade4", dep=TRUE )
install.packages("afex", dep=TRUE )
install.packages("agricolae", dep=TRUE )
install.packages("car", dep=TRUE )
install.packages("class", dep=TRUE )
install.packages("combinat", dep=TRUE )
install.packages("e1071", dep=TRUE )
install.packages("lme4", dep=TRUE )
install.packages("lmerTest", dep=TRUE )
install.packages("lsmeans", dep=TRUE )
install.packages("maptree", dep=TRUE )
install.packages("mda", dep=TRUE )
install.packages("multcomp", dep=TRUE )
install.packages("multcompView", dep=TRUE )
install.packages("mvtnorm", dep=TRUE )
install.packages("nlme", dep=TRUE )
install.packages("outliers", dep=TRUE )
install.packages("pbkrtest", dep=TRUE )
install.packages("reshape2", dep=TRUE )
install.packages("scatterplot3d", dep=TRUE )
install.packages("sqldf" )
}
A.m <- matrix(c(3, 0, 0, 1, 0, 0),
byrow=T,
ncol=2) # zwei Spalten heißt: Zeile 1: 3 0, dann Zeile 2: 0 1 und Zeile 3: 0 0
A.m
A.m <- matrix(c(3, 0, 0, 1, 0, 0,1),
byrow=T,# default ist false. Muss true, damit so eingelesen wird. Default ist also "by column", es
# wird spaltenweise gefüllt
ncol=2) # zwei Spalten heißt: Zeile 1: 3 0, dann Zeile 2: 0 1 und Zeile 3: 0 0
A.m <- matrix(c(3, 0, 0, 1, 0, 0),
byrow=T,# default ist false. Muss true, damit so eingelesen wird. Default ist also "by column", es
# wird spaltenweise gefüllt
ncol=2) # zwei Spalten heißt: Zeile 1: 3 0, dann Zeile 2: 0 1 und Zeile 3: 0 0
clear
?clear
??clear
t(A.m)            # transponieren -> Tauschen von Zeilen und Spalten. Zeile 1 wird Spalte 1 bzw. andersrum
diag(c(2,3,5,11)) # Diagonalmatrix
diag(1, 4)        # Einheitsmatrix
diag(A.m)         # Diagonalelemente ausgeben
sum(diag(A.m))    # Spur
diag(c(2,3,5,11)) # Diagonalmatrix -> nur Werte auf Diagonale, Rest ist 0. Werte werden auf der Diagonalen von
sum(diag(A.m))    # Spur -> Summe der Elemente auf der Diagonalen
A.m <- matrix(c(3, 0, 1, 0, 1, 2, 1, 2, 4),
byrow=T,
ncol=3)
(A.m <- matrix(c(3, 0, 1, 0, 1, 2, 1, 2, 4),
byrow=T,
ncol=3))
(B.m <- matrix(c(1, 0, 0, 0, 2, 0, 0, 0, 4),
byrow=T,
ncol=3))
(C.m <- matrix(c(1, 2, 3, 0, 1, 2, 0, 0, 1),
byrow=T,
ncol=3))
(D.m <- matrix(1:6, byrow=F, ncol=2))
(E.m <- matrix(rep(1:4, times=2), byrow=T, ncol=4))
A.m
B.m
(A.m + B.m)      # Addition
C.m
(3 * C.m)        # Multiplikation mit einem Skalar
D.m
E.m
D.m %*% E.m    # Matrixmultiplikation
(A.m <- matrix(1:4, byrow=T, ncol=2)) # 2x2-Matrix
(B.m <- matrix(c(2,3,0,0), byrow=T, ncol=2))
solve(A.m) # Inverse
A.m %*% solve(A.m)
solve(A.m) %*% A.m # Achtung, Rundungsfehler!
det(A.m)
(A.m <- matrix(1:4, byrow=T, ncol=2)) # 2x2-Matrix
A.m[1,1]*A.m[2,2]-A.m[1,2]*A.m[2,1] # hier: 1*4 - 3*2 = -2
1/det(A.m) * matrix(c(A.m[2,2], -A.m[1,2], -A.m[2,1], A.m[1,1]), byrow=T, ncol=2)
det(B.m)
B.m
solve(B.m)
A.m <- matrix(c(2, 1, 7, 0, 1 , 3, -3, 2, 0), byrow=T, ncol=3)
?qr
qr(A.m)
B.m <- matrix(c(1, 1, 2, 0, 1, 0, -1, -1, 2), byrow=T, ncol=3)
qr(B.m)$rank
(B.m <- matrix(c(1, 1, 2, 0, 1, 0, -1, -1, 2), byrow=T, ncol=3))
(A.m <- matrix(c(2, 1, 7, 0, 1 , 3, -3, 2, 0), byrow=T, ncol=3))
(A.m <- matrix(c(2, 0, 1, 0), byrow=T, ncol=2))
library(MASS)
ginv(A.m)
(A.m <- matrix(c(2, 1, 7, 0, 1 , 3, -3, 2, 0), byrow=T, ncol=3))
qr(A.m)$rank
(A.m <- matrix(c(2, 0,
1, 0), byrow=T, ncol=2))
qr(A.m)$rank
ginv(A.m) # "ginv" -> general inverse
A.m%*%(ginv(A.m))
ginv(A.m)*A.m
(A.m <- matrix(c(2, 0,
1, 0), byrow=T, ncol=2))
ginv(A.m)%*%A.m
A.m%*%ginv(A.m)%*%A.m
detach(package: MASS)
library(MASS)
(A.m <- matrix(c(3, 0, -9, 6), byrow=T, ncol=2))
eigen(A.m)$values # Eigenwerte
eigen(A.m)
(A.m <- matrix(c(4, 0, -9, 5), byrow=T, ncol=2))
eigen(A.m)$values # Eigenwerte
(A.m <- matrix(c(3, 0, -9, 6), byrow=T, ncol=2))
eigen(A.m)$values # Eigenwerte
(A.m <- matrix(c(3, 0, -9, 3), byrow=T, ncol=2))
eigen(A.m)$values # Eigenwerte
(A.m <- matrix(c(3, 0, -9, 6), byrow=T, ncol=2))
e.v <- c(0, 1)
A.m %*% e.v
6 %*% e.v
det(A.m)        # Determinante
sum(diag(A.m))  # Spur
A.m <- matrix(c(3, 0, 0, 6), byrow=T, ncol=2)
(A.m <- matrix(c(3, 0, 0, 6), byrow=T, ncol=2))
eigen(A.m)$values
(A.m <- matrix(c(3, 0, 0, 6), byrow=T, ncol=2))
eigen(A.m)$values
e.v1 <- c(0, 1)
A.m %*% e.v1
6 %*% e.v1
e.v2 <- c(-1, 0)
A.m %*% e.v2
3 %*% e.v2
eigen(A.m)
eigen(A.m)$vectors
e.v1 %*% e.v2      # Eigenvektoren sind orthogonal
y.ertrag <- c(22, 35)
X.d <- matrix(c(1, 1, 2.5, 6.5), byrow=F, ncol=2)
(X.d <- matrix(c(1, 1, 2.5, 6.5), byrow=F, ncol=2))
X.d %*% ginv(X.d) %*% y.ertrag
solve(X.d)
ginv(X.d)
b.v <- ginv(X.d) %*% y.ertrag
b.v
X.d %*% b.v
qr(X.d)$rank
solve(X.d)
X.d %*% ginv(X.d) %*% y.ertrag
ginv(X.d)
X.d %*% ginv(X.d) %*% y.ertrag # die Gleichung kann man immer nehmen
(b.v <- ginv(X.d) %*% y.ertrag) # "Umstellen", um b zu kriegen
X.d %*% b.v
y.ertrag <- c(22, 17.5, 27, 23, 25, 22.5, 33, 26, 35)
(X.d <- matrix(c(rep(1, times=9), seq(2.5, 6.5, 0.5)), byrow=F, ncol=2))
X.d %*% ginv(X.d) %*% y.ertrag
b.v <- ginv(t(X.d) %*% X.d) %*% t(X.d) %*% y.ertrag
b.v
X.d %*% ginv(X.d) %*% y.ertrag
summary(lm(y.ertrag ~ X.d[,2]))
X.d %*% b.v
coef(lm(y.ertrag ~ X.d[,2]))[1]+coef(lm(y.ertrag ~ X.d[,2]))[2] * X.d[,2]
X.d[,2]
# b1                              +     b2                              *
coef(lm(y.ertrag ~ X.d[,2]))[1]   +   coef(lm(y.ertrag ~ X.d[,2]))[2]   *   X.d[,2]
(H.m <- diag(1, nrow(X.d)) - X.d %*% ginv(t(X.d) %*% X.d) %*% t(X.d))
(q.h.y <- y.ertrag %*% H.m %*% y.ertrag)
summary(lm(y.ertrag ~ X.d[,2]))$sigma^2 * 7
str(summary)
install packages devtools
install.packages("devtools")
library(devtools)
install.packages("httr")
install.packages("openssl")
install.packages("libssl-dev")
install.packages("devtools")
install.packages("usethis")
install.packages("devtools")
install.packages(devtools)
install.packages("devtools")
install.packages(devtools)
install.packages("devtools")
library(devtools)
install_github(repo = "loosolab/PARrOT/PARrOT",host = "github.molgen.mpg.de/api/v3")
library(PARrOT)
table <- spike_in()
matrix <- calcscorematrix(table+)
matrix <- calcscorematrix(table)
snode <- buildSinglenode(matrix)
readcluster(clustermember = "block_member.csv")
library(devtools)
install_github(repo = "loosolab/PARrOT/PARrOT",host = "github.molgen.mpg.de/api/v3")
install_github(repo = "loosolab/PARrOT/PARrOT",host = "github.molgen.mpg.de/api/v3")
install_github(repo = "loosolab/PARrOT/PARrOT",host = "github.molgen.mpg.de/api/v3")
library(devtools)
install_github(repo = "loosolab/PARrOT/PARrOT",host = "github.molgen.mpg.de/api/v3")
install_github(repo = "loosolab/PARrOT/PARrOT",host = "github.molgen.mpg.de/api/v3")
library(devtools)
install_github(repo = "loosolab/PARrOT/PARrOT",host = "github.molgen.mpg.de/api/v3")
install_github(repo = "loosolab/PARrOT/PARrOT",host = "github.molgen.mpg.de/api/v3")
library(PARrOT)
table <- spike_in()
matrix <- calcscorematrix(table = table)
snode <- buildsinglenode(matrix = matrix)
snode <- buildsinglenode(matrix = matrix)
snode <- buildSinglenode(matrix = matrix)
python ./Graph.py -i adjMatrix_singlenode.csv -o <your OUTPUT dir>
library(calibrate)
library("DESeq2")
d.raw <- read.csv("counts_CDS.txt", header=TRUE, row.names=1, sep='\t', comment.char= '#')
d <- as.matrix(d.raw[, 6:14])
colnames(d) <- c("Untreated_1", "Untreated_2", "Untreated_3", "Erythromycin_1", "Erythromycin_2", "Erythromycin_3", "Clindamycin_1", "Clindamycin_2", "Clindamycin_3")
setwd("~/Dokumente/master_git/dge_visualization_site/dge_visualization/test/ressources")
library("DESeq2")
d.raw <- read.csv("counts_CDS.txt", header=TRUE, row.names=1, sep='\t', comment.char= '#')
d <- as.matrix(d.raw[, 6:14])
colnames(d) <- c("Untreated_1", "Untreated_2", "Untreated_3", "Erythromycin_1", "Erythromycin_2", "Erythromycin_3", "Clindamycin_1", "Clindamycin_2", "Clindamycin_3")
condition <- as.factor(c("Untreated", "Untreated", "Untreated", "Erythromycin", "Erythromycin", "Erythromycin", "Clindamycin", "Clindamycin", "Clindamycin"))
cData <- data.frame(row.names=colnames(d), condition)
dds <- DESeqDataSetFromMatrix(countData=d, colData=cData, design=~condition)
d.deseq <- DESeq(object=dds)
dds <- estimateSizeFactors(dds)
write.csv(counts(dds, normalized=TRUE), file="counts_normalized.txt")
res <- results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"))
res <- res[complete.cases(res),]
rownames(res[res[,6] < 0.01,])
write.csv(as.data.frame(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"))
plotMA(res, ylim=c(-10,10))
write.csv(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"), file = "MiriTest.csv")
write.csv(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"), file = "MiriTest.csv"))
write.csv(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"), file = "MiriTest.csv"))
write.csv(as.data.frame(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin")))
plotMA(res, ylim=c(-10,10))
write.csv(as.data.frame(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin")))
plotMA(res, ylim=c(-10,10))
write.csv(as.data.frame(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"))))
plotMA(res, ylim=c(-10,10))
library(calibrate)
write.csv(as.data.frame(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"))), file="MiriTest.txt")
res <- results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"))
res <- res[complete.cases(res),]
rownames(res[res[,6] < 0.01,])
write.csv(as.data.frame(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"))))
write.csv(as.data.frame(results(d.deseq, contrast=c("condition", "Untreated", "Erythromycin"))), file="MiriTest.txt")
dds <- DESeqDataSetFromMatrix(countData=d, colData=cData, design=~condition)
d.deseq <- DESeq(object=dds)
miriTest2 <- DESeq(dds, betaPrior=FALSE)
View(miriTest2)
